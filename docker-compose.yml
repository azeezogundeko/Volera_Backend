version: '3.8'

services:
  web:
    build: .
    expose:
      - 8000
    env_file:
      - .env
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
    depends_on:
      - searxng
      - redis
      - celery_worker
    networks:
      - dokploy-network
    labels:
      - traefik.enable=true
      - traefik.http.routers.volera-backend.rule=Host(`server.volera.app`)
      - traefik.http.routers.volera-backend.entrypoints=web
      - traefik.http.services.volera-backend.loadbalancer.server.port=8000

  searxng:
    image: searxng/searxng:latest
    container_name: searxng
    networks:
      - dokploy-network
      - web
    environment:
      - SEARXNG_BASE_URL=https://search.volera.app/
      - SEARXNG_HOSTNAME=0.0.0.0
      - SEARXNG_HTTP_PROXY=socks5h://tor:9050
      - SEARXNG_HTTPS_PROXY=socks5h://tor:9050
      - SEARXNG_SECRET=${SEARXNG_SECRET:-ultrasecretkey}
      - SEARXNG_REDIS_URL=redis://redis:6379/0
      - SEARXNG_BIND_ADDRESS=0.0.0.0:8080
      - SEARXNG_LIMITER=true
      - REDIS_URL=redis://redis:6379/0
    volumes:
      - ./searxng:/etc/searxng:ro
    depends_on:
      - redis
      - tor
    restart: unless-stopped
    labels:
      - traefik.enable=true
      - traefik.http.routers.volera-searxng.rule=Host(`search.volera.app`)
      - traefik.http.routers.volera-searxng.entrypoints=web,websecure
      - traefik.http.routers.volera-searxng.tls=true
      - traefik.http.routers.volera-searxng.tls.certresolver=letsencrypt
      - traefik.http.services.volera-searxng.loadbalancer.server.port=8080
      # Add security headers
      - traefik.http.middlewares.searxng-security.headers.customResponseHeaders.X-Frame-Options=DENY
      - traefik.http.middlewares.searxng-security.headers.customResponseHeaders.X-Content-Type-Options=nosniff
      - traefik.http.middlewares.searxng-security.headers.customResponseHeaders.X-XSS-Protection=1; mode=block
      - traefik.http.routers.volera-searxng.middlewares=searxng-security
    healthcheck:
      test: ["CMD", "wget", "--spider", "--quiet", "http://localhost:8080/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3

  tor:
    image: "dperson/torproxy:latest"
    container_name: tor
    networks:
      - web
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "9050"]
      interval: 30s
      timeout: 10s
      retries: 3

  redis:
    image: "redis:alpine"
    container_name: redis
    command: redis-server --save 60 1 --loglevel warning
    networks:
      - web
    volumes:
      - redis_data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  celery_worker:
    build: .
    command: celery -A utils.celery_tasks.celery_app worker --loglevel=info --events
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
    env_file:
      - .env
    environment:
      - REDIS_URL=redis://redis:6379/0
      - C_FORCE_ROOT=true
    depends_on:
      - redis
    networks:
      - dokploy-network
    healthcheck:
      test: ["CMD-SHELL", "celery -A utils.celery_tasks.celery_app inspect ping -d celery@$$HOSTNAME"]
      interval: 30s
      timeout: 10s
      retries: 3

  flower:
    build: .
    command: celery -A utils.celery_tasks.celery_app flower --port=5555 --persistent=True --state_save_interval=10000 --broker_api=redis://redis:6379/0
    expose:
      - 5555
    env_file:
      - .env
    environment:
      - REDIS_URL=redis://redis:6379/0
      - FLOWER_BASIC_AUTH=${FLOWER_USER}:${FLOWER_PASSWORD}
      - FLOWER_PERSISTENT=True
      - FLOWER_STATE_SAVE_INTERVAL=10000
      - FLOWER_PURGE_OFFLINE_WORKERS=60
    depends_on:
      - redis
      - celery_worker
    networks:
      - dokploy-network
    volumes:
      - ./data:/app/data
    labels:
      - traefik.enable=true
      - traefik.http.routers.volera-flower.rule=Host(`flower.volera.app`)
      - traefik.http.routers.volera-flower.entrypoints=web,websecure
      - traefik.http.routers.volera-flower.tls=true
      - traefik.http.routers.volera-flower.tls.certresolver=letsencrypt
      - traefik.http.services.volera-flower.loadbalancer.server.port=5555
      # Add basic auth middleware
      - traefik.http.middlewares.flower-auth.basicauth.users=${FLOWER_USER}:${FLOWER_PASSWORD_HASH}
      - traefik.http.routers.volera-flower.middlewares=flower-auth

volumes:
  searxng_data:
  redis_data:

networks:
  dokploy-network:
    external: true
  web:
    external: true
