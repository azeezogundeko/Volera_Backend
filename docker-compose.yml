services:
  tor_proxy:
    image: dperson/torproxy
    container_name: tor_proxy
    expose:
      - 9050
    networks:
      - dokploy-network
    restart: unless-stopped
    environment:
      - TZ=UTC
    healthcheck:
      test: ["CMD-SHELL", "nc -z localhost 9050"]
      interval: 30s
      timeout: 10s
      retries: 3

  qdrant:
    image: qdrant/qdrant:latest
    restart: always
    container_name: qdrant
    ports:
      - "6333:6333"
      - "6334:6334"
    expose:
      - 6333
      - 6334
      - 6335
    volumes:
      - qdrant_storage:/qdrant/storage
      - qdrant_snapshots:/qdrant/snapshots
      - ./qdrant_config.yaml:/qdrant/config/production.yaml
    environment:
      - QDRANT_ALLOW_RECOVERY=true
      - QDRANT_FORCE_DISABLE_TELEMETRY=true
    networks:
      - dokploy-network
    labels:
      - traefik.enable=true
      - traefik.http.routers.qdrant.rule=Host(`qdrant.volera.app`)
      - traefik.http.routers.qdrant.entrypoints=websecure
      - traefik.http.routers.qdrant.tls=true
      - traefik.http.routers.qdrant.tls.certresolver=letsencrypt
      - traefik.http.services.qdrant.loadbalancer.server.port=6333
      
    env_file:
      - .env

  web:
    build: .
    expose:
      - 8000
    env_file:
      - .env
    environment:
      - TOR_PROXY_HOST=tor_proxy
      - TOR_PROXY_PORT=9050
      - DOCKER_CONTAINER=1
      - CHROME_STORAGE_PATH=/app/craw4ai_config/state.json
    volumes:
      - data:/app/data
      - ./logs:/app/logs
      - chrome_storage:/app/craw4ai_config
    depends_on:
      - searxng
      - redis
      - celery_worker
      - qdrant
      - tor_proxy
    networks:
      - dokploy-network
    labels:
      - traefik.enable=true
      - traefik.http.routers.volera-backend.rule=Host(`server.volera.app`)
      - traefik.http.routers.volera-backend.entrypoints=websecure
      - traefik.http.routers.volera-backend.tls=true
      - traefik.http.routers.volera-backend.tls.certresolver=letsencrypt
      - traefik.http.services.volera-backend.loadbalancer.server.port=8000

  searxng:
    image: docker.io/searxng/searxng:latest
    volumes:
      - ./searxng:/etc/searxng:rw
    expose:
      - 8080
    networks:
      - dokploy-network
    restart: unless-stopped
    labels:
      - traefik.enable=true
      - traefik.http.routers.volera-searxng.rule=Host(`search.volera.app`)
      - traefik.http.routers.volera-searxng.entrypoints=websecure
      - traefik.http.routers.volera-searxng.tls=true
      - traefik.http.routers.volera-searxng.tls.certresolver=letsencrypt
      - traefik.http.services.volera-searxng.loadbalancer.server.port=8080

  redis:
    image: redis:alpine
    expose:
      - 6379
    networks:
      - dokploy-network
    command: redis-server /usr/local/etc/redis/redis.conf --appendonly yes
    volumes:
      - redis_data:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
      start_period: 10s

  celery_worker:
    build: .
    command: celery -A utils.celery_tasks.celery_app worker --loglevel=info --events
    volumes:
      - data:/app/data
      - ./logs:/app/logs
      - chrome_storage:/app/craw4ai_config
    env_file:
      - .env
    environment:
      - REDIS_URL=redis://redis:6379/0
      - C_FORCE_ROOT=true
      - CELERY_BROKER_CONNECTION_RETRY=true
      - CELERY_BROKER_CONNECTION_RETRY_ON_STARTUP=true
      - CELERY_BROKER_CONNECTION_MAX_RETRIES=10
      - CELERY_BROKER_CONNECTION_TIMEOUT=30
      - CHROME_STORAGE_PATH=/app/craw4ai_config/state.json
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - dokploy-network
    healthcheck:
      test: ["CMD-SHELL", "celery -A utils.celery_tasks.celery_app inspect ping -d celery@$$HOSTNAME"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  celery_beat:
    build: .
    command: celery -A utils.celery_tasks.celery_app beat --loglevel=info
    volumes:
      - data:/app/data
      - ./logs:/app/logs
      - chrome_storage:/app/craw4ai_config
    env_file:
      - .env
    environment:
      - REDIS_URL=redis://redis:6379/0
      - C_FORCE_ROOT=true
      - CELERY_BROKER_CONNECTION_RETRY=true
      - CELERY_BROKER_CONNECTION_RETRY_ON_STARTUP=true
      - CELERY_BROKER_CONNECTION_MAX_RETRIES=10
      - CELERY_BROKER_CONNECTION_TIMEOUT=30
      - CHROME_STORAGE_PATH=/app/craw4ai_config/state.json
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - dokploy-network

  flower:
    build: .
    command: celery -A utils.celery_tasks.celery_app flower --port=5555 --persistent=True --state_save_interval=10000 --broker_api=redis://redis:6379/0
    expose:
      - 5555
    env_file:
      - .env
    environment:
      - REDIS_URL=redis://redis:6379/0
      - FLOWER_BASIC_AUTH=${FLOWER_USER}:${FLOWER_PASSWORD}
      - FLOWER_PERSISTENT=True
      - FLOWER_STATE_SAVE_INTERVAL=10000
      - FLOWER_PURGE_OFFLINE_WORKERS=60
    depends_on:
      - redis
      - celery_worker
    networks:
      - dokploy-network
    volumes:
      - data:/app/data
    labels:
      - traefik.enable=true
      - traefik.http.routers.volera-flower.rule=Host(`flower.volera.app`)
      - traefik.http.routers.volera-flower.entrypoints=websecure
      - traefik.http.routers.volera-flower.tls=true
      - traefik.http.routers.volera-flower.tls.certresolver=letsencrypt
      - traefik.http.services.volera-flower.loadbalancer.server.port=5555
      - traefik.http.middlewares.flower-auth.basicauth.users=${FLOWER_USER}:${FLOWER_PASSWORD_HASH}
      - traefik.http.routers.volera-flower.middlewares=flower-auth

  flare-bypasser:
    build: 
      context: ./flare-bypasser
      dockerfile: Dockerfile
    expose:
      - 20080
    environment:
      - TZ=UTC
      - PORT=20080
    networks:
      - dokploy-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:20080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      - traefik.enable=true
      - traefik.http.routers.flare-bypasser.rule=Host(`flare.volera.app`)
      - traefik.http.routers.flare-bypasser.entrypoints=websecure
      - traefik.http.routers.flare-bypasser.tls=true
      - traefik.http.routers.flare-bypasser.tls.certresolver=letsencrypt
      - traefik.http.services.flare-bypasser.loadbalancer.server.port=20080

volumes:
  searxng_data:
  redis_data:
  qdrant_storage:
    driver: local
  qdrant_snapshots:
    driver: local
  data:
    driver: local
  chrome_storage:
    driver: local

networks:
  dokploy-network:
    external: true
